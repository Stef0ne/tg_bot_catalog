import logging

from typing import Dict, Optional

from aiogram import F, Router, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command
from sqlalchemy.ext.asyncio import AsyncSession

from app.bot.callbacks.menu_callback import UserMenuCallbackData
from app.bot.keyboards.keyboard_builder import (
    build_main_menu_keyboard,
    build_submenu_keyboard,
    LEVEL_CATEGORIES,
    LEVEL_SUBCATEGORIES
)
from app.db.models import Category, Subcategory
from app.db.requests.get_requests import (
    get_content_item_by_subcategory_id
)
from app.bot.filters.chat_types import ChatTypeFilter



user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(["private"]))
user_private_router.callback_query.filter(ChatTypeFilter(["private"]))

user_menu_messages: Dict[int, Dict[str, Optional[int]]] = {}

async def delete_safe(bot, chat_id: int, message_id: Optional[int]):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    if message_id:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=message_id)
            logging.info(f"Successfully deleted message {message_id} in chat {chat_id}")
            return True
        except Exception as e:
            logging.error(f"Failed to delete message {message_id} in chat {chat_id}: {e}")
    return False

@user_private_router.message(CommandStart())
async def start_command(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫—É –ú–µ–Ω—é."""
    user_id = msg.from_user.id
    chat_id = msg.chat.id

    if user_id in user_menu_messages:
        logging.info(f"Cleaning up old menu messages for user {user_id}")
        await delete_safe(msg.bot, chat_id, user_menu_messages[user_id].get('content_msg_id'))
        await delete_safe(msg.bot, chat_id, user_menu_messages[user_id].get('submenu_msg_id'))
        await delete_safe(msg.bot, chat_id, user_menu_messages[user_id].get('main_menu_msg_id'))
        user_menu_messages[user_id] = {
            'main_menu_msg_id': None,
            'submenu_msg_id': None,
            'content_msg_id': None
        }

    text = """
üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ BlockSide

üî•–ú—ã –∫–æ–º–∞–Ω–¥–∞ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –∏–¥–µ–µ–π –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã. –î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –í–∞–º –Ω–∞—á–∞—Ç—å –æ—Ä–∏–µ–Ω—Ç–∏—Ä—Ä–æ–≤–∞—Ç—å—Å—è –∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ–ø–æ–ª–µ, –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏—Å—Ö–æ–¥–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö. –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –≤—ã—Å—Ç—Ä–æ–∏—Ç—å –°–ò–°–¢–ï–ú–ù–£–Æ —Ä–∞–±–æ—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –º–∞—Å—à—Ç–∞–±–∏—Ä—É—é—â–∏–µ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

–ï—Å–ª–∏ –∫—Ä–∞—Ç–∫–æ.....üöÄ —ç—Ç–æ  üë•‚åõÔ∏èüéìüíΩüí∂üëâüîßüìàüéØ


‚ùóÔ∏è –ß—Ç–æ –æ—Ç –í–∞—Å –æ–∂–∏–¥–∞–µ—Ç—Å—è?

‚ñ™Ô∏è–ó–∞–¥–∞–≤–∞—Ç—å –±–æ–ª—å—à–µ —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
‚ñ™Ô∏è–ó–∞–¥–∞–≤–∞—Ç—å –±–æ–ª—å—à–µ —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
‚ñ™Ô∏è–ó–∞–¥–∞–≤–∞—Ç—å –±–æ–ª—å—à–µ —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
‚ñ™Ô∏è–ò—Å–ø–æ–≤–µ–¥–æ–≤–∞—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø "–£–∑–Ω–∞–ª - –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª"
‚ñ™Ô∏è–£–≤–∏–¥–µ–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - —Å–¥–µ–ª–∞–ª —Å—Ä–∞–∑—É.      
‚ñ™Ô∏è–û—Ç–º–µ—á–∞—Ç—å —Å–≤–æ–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –º–∞–ª–µ–Ω—å–∫–∏–º–∏ —à–∞–∂–æ—á–∫–∞–º–∏
‚ñ™Ô∏è–°–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –Ω–∞–∑–∞–¥.


–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö—É–∑–Ω–∏—Ü—É STARTüèÅ
"""
    start_menu_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="start_action")]
        ]
    )
    await msg.answer(text, reply_markup=start_menu_button)


@user_private_router.callback_query(F.data == 'start_action')
async def handle_start_action(callback: types.CallbackQuery, db_session: AsyncSession):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id

    if user_id in user_menu_messages:
        await delete_safe(callback.bot, chat_id, user_menu_messages[user_id].get('content_msg_id'))
        await delete_safe(callback.bot, chat_id, user_menu_messages[user_id].get('submenu_msg_id'))
        await delete_safe(callback.bot, chat_id, user_menu_messages[user_id].get('main_menu_msg_id'))

    keyboard = await build_main_menu_keyboard(db_session)
    if not keyboard or not keyboard.inline_keyboard:
        await callback.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–µ–Ω—é –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ.", show_alert=True)
        return

    main_menu_msg = await callback.message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=keyboard)

    user_menu_messages[user_id] = {
        'main_menu_msg_id': main_menu_msg.message_id,
        'submenu_msg_id': None,
        'content_msg_id': None
    }
    await callback.answer()


@user_private_router.message(Command("menu"))
async def show_main_menu(message: types.Message, db_session: AsyncSession):
    user_id = message.from_user.id
    chat_id = message.chat.id

    if user_id in user_menu_messages:
        await delete_safe(message.bot, chat_id, user_menu_messages[user_id].get('content_msg_id'))
        await delete_safe(message.bot, chat_id, user_menu_messages[user_id].get('submenu_msg_id'))
        await delete_safe(message.bot, chat_id, user_menu_messages[user_id].get('main_menu_msg_id'))

    keyboard = await build_main_menu_keyboard(db_session)
    if not keyboard or not keyboard.inline_keyboard:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–µ–Ω—é –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ.")
        return
    
    main_menu_msg = await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=keyboard)

    user_menu_messages[user_id] = {
        'main_menu_msg_id': main_menu_msg.message_id,
        'submenu_msg_id': None,
        'content_msg_id': None
    }


@user_private_router.callback_query(UserMenuCallbackData.filter(F.level == LEVEL_CATEGORIES))
async def navigate_to_submenu(callback: types.CallbackQuery, callback_data: UserMenuCallbackData, db_session: AsyncSession):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    category_id = callback_data.category_id

    user_msgs = user_menu_messages.setdefault(user_id, {})

    await delete_safe(callback.bot, chat_id, user_msgs.get('content_msg_id'))
    await delete_safe(callback.bot, chat_id, user_msgs.get('submenu_msg_id'))

    keyboard = await build_submenu_keyboard(category_id, db_session)
    category = await db_session.get(Category, category_id)
    category_name = category.name if category else "–†–∞–∑–¥–µ–ª"

    if not keyboard or not keyboard.inline_keyboard:
        submenu_msg = await callback.message.answer(f"{category_name}: \n\n–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç.")
        user_msgs['submenu_msg_id'] = submenu_msg.message_id
        user_msgs['content_msg_id'] = None
    else:
        submenu_msg = await callback.message.answer(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {category_name}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª:",
            reply_markup=keyboard
        )
        user_msgs['submenu_msg_id'] = submenu_msg.message_id
        user_msgs['content_msg_id'] = None

    await callback.answer()


@user_private_router.callback_query(UserMenuCallbackData.filter(F.level == LEVEL_SUBCATEGORIES))
async def show_content(callback: types.CallbackQuery, callback_data: UserMenuCallbackData, db_session: AsyncSession):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    subcategory_id = callback_data.subcategory_id

    user_msgs = user_menu_messages.setdefault(user_id, {})

    await delete_safe(callback.bot, chat_id, user_msgs.get('content_msg_id'))

    content_item = await get_content_item_by_subcategory_id(
        session=db_session,
        subcategory_id=subcategory_id
    )

    if content_item:
        content_msg = await callback.message.answer(
            text=content_item.text_content,
            reply_markup=None
        )
        user_msgs['content_msg_id'] = content_msg.message_id
    else:
        subcategory = await db_session.get(Subcategory, subcategory_id)
        subcategory_name = subcategory.name if subcategory else "–ü–æ–¥—Ä–∞–∑–¥–µ–ª"
        content_msg = await callback.message.answer(
            f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–ª—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞ '{subcategory_name}' –∫–æ–Ω—Ç–µ–Ω—Ç –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω.",
            reply_markup=None
        )
        user_msgs['content_msg_id'] = content_msg.message_id

    await callback.answer()